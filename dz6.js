/*1) Почитать про принципы программирования KISS, DRY, YAGNI + почитать про "Антипаттерны" Чистого кода

--KISS - Keep It Simple, Stupid (Чем проще код, тем легче в нём разобраться.)
--DRY - Don’t Repeat Yourself (не повторяться, переиспользовать фрагменты, делать код универсальным)
--YAGNI - You Aren’t Gonna Need It(создавать какую-то функциональность следует только тогда, когда она действительно нужна)


Антипатерны:

-- Преждевременная оптимизация (оптимизация, проводимая до того, как у вас есть вся информация, необходимая для принятия взвешенных решений по поводу того, где и как нужно её проводить)
-- Спагетти-код (это код, практически не имеющий никакой структуры)
-- Золотой молоток (использовании одного и того же решения везде, в том числе путём искусственной подгонки условий, требований, ограничений задачи под данное решение)
-- Лодочный якорь (оставлять неиспользуемый код в базе, потому что он может понадобиться позже)
-- Мертвый код (код, который имеет избыточные или некачественные части, которые кажутся неотъемлемой частью программы, но мы не до конца понимаем, что он делает или как он влияет на все приложение)
-- Разрастание кода (когда в кодовой базе есть объекты, существующие исключительно для вызова других, более важных объектов)
-- Божественный объект (объекты делают слишком много)
-- Магические числа и строчки(использование чисел или строковых констант без имён и пояснений)
-- Эффект внутренней платформы(переизобретение тех возможностей, которые уже есть в операционке или платформе)

2) Прочитать про способы хранения LocalStorage, SessionStorage и Cookie
Объекты веб-хранилища localStorage и sessionStorage позволяют хранить пары ключ/значение в браузере.
-key и value должны быть строками.
-Лимит 5 Мб+, зависит от браузера.
-Данные не имеют «времени истечения».
-Данные привязаны к источнику (домен/протокол/порт).
--Local Storage
`Совместно используется между всеми вкладками и окнами с одинаковым источником
`«Переживает» перезапуск браузера

--Session Storage
`Разделяется в рамках вкладки браузера, среди ифреймов из того же источника
`«Переживает» перезагрузку страницы (но не закрытие вкладки)


--Cookie
Куки – это небольшие строки данных, которые хранятся непосредственно в браузере.
`Операция записи изменяет только то куки, которое было указано.
`Имя и значение куки должны быть закодированы.
`Одно куки вмещает до 4kb данных, разрешается более 20 куки на сайт (зависит от браузера).
`Сторонние куки могут быть запрещены браузером
`Установка отслеживающих куки пользователям из стран ЕС требует их явного согласия на это в соответствии с законодательством GDPR.

3) HTML / CSS - Базовая структура html документа, БЭМ методология


Базовая структура html документа
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Базовая разметка HTML</title>
</head>
<body>
  <h1>Заголовок</h1>
  <p>Содержание</p>
</body>
</html>

--head, содержащий метаинформацию о нашем сайте. 
Данные из этого блока не отображаются непосредственно на странице,
а служат для её описания, подключения стилей и скриптов.

--body является основным местом, где строится HTML-разметка. 
Данные в этом блоке будут обработаны и выведены в браузер.

БЭМ методология:

БЭМ (Блок, Элемент, Модификатор) — компонентный подход к веб-разработке. 
В его основе лежит принцип разделения интерфейса на независимые блоки. 
Он позволяет легко и быстро разрабатывать интерфейсы любой сложности и повторно использовать существующий код, избегая «Copy-Paste».
Где:
--Блок - функционально независимый компонент страницы, который может быть повторно использован.
--Элемент - cоставная часть блока, которая не может использоваться в отрыве от него.
--Модификатор - cущность, определяющая внешний вид, состояние или поведение блока либо элемента.


4) Почитать про паттерны функционального программирования + посмотреть примеры использования.
В основе функционального программирования — чистые функции и неизменяемые структуры данных.
-- Функция как элемент композиции (в функциональном программировании элемент композиции — это функция. Передача данных через несколько вызовов функций — их композиция.)
-- Чистые функции и побочные эффекты (это функция, которая не вызывает побочных эффектов (side effects), то есть никак не влияет на состояние внешнего мира.)
-- Рекурсия (нужно использовать map(),reduce() или рекурсию)
-- Функции высших порядков (функции, которые принимают другие функции как аргументы или возвращают функции как результат)
-- Частичное применение («запоминание» аргументов называется частичным применением функции. Мы как бы выполняем функцию «не до конца», а только ту часть, которая нам уже известна благодаря переданным аргументам)
-- Каррирование (процесс преобразования функции с несколькими аргументами в последовательность функций, каждая из которых принимает только один аргумент.)
-- Не мутировать данные

5) Способы позиционирования контента на странице
Значения position:

--static — значение по умолчанию, элемент позиционируется в соответствии с его местом в потоке документа;
--relative — элемент позиционируется относительно своего исходного положения в потоке документа;
--absolute — элемент позиционируется относительно ближайшего родительского элемента, который имеет позиционирование, отличное от static;
--fixed — элемент позиционируется относительно окна браузера;
--sticky — элемент остаётся на месте при прокрутке страницы, но при этом может быть отодвинут от своей стандартной позиции.

6) Веса селекторов:

по убыванию специфичности:

--Селекторы по идентификатору
--Селекторы по классу, селекторы по атрибуту и селекторы с псевдоклассами
--Селекторы по тегу, селекторы с псевдоэлементами

*Комбинаторы +, >, ~, универсальный селектор * и псевдокласс :where() веса не имеют.
*Псевдоклассы :is(), :has() и :not() принимают вес наиболее специфичного селектора внутри скобок.
